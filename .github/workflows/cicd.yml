name: CI/CD

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]
  workflow_dispatch:

concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Pytest
        run: pytest -q

  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref == 'refs/heads/main' && secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/myflask
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    name: Deploy to Server (optional)
    if: ${{ github.ref == 'refs/heads/main' && secrets.SSH_HOST != '' && secrets.SSH_USER != '' && secrets.SSH_KEY != '' }}
    runs-on: ubuntu-latest
    needs: build_and_push
    env:
      REMOTE_DIR: /home/${{ secrets.SSH_USER }}/apps/tft
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/myflask
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: |
            docker-compose.prod.yml
            nginx/**
          target: ${{ env.REMOTE_DIR }}

      - name: Remote deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            mkdir -p ${{ env.REMOTE_DIR }}/certbot/config ${{ env.REMOTE_DIR }}/certbot/www
            cd ${{ env.REMOTE_DIR }}
            echo DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} > .env
            echo RIOT_API_KEY=${{ secrets.RIOT_API_KEY }} >> .env
            if [ "${{ secrets.DOMAIN }}" != "" ]; then echo DOMAIN=${{ secrets.DOMAIN }} >> .env; fi
            if [ "${{ secrets.LETSENCRYPT_EMAIL }}" != "" ]; then echo LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }} >> .env; fi
            # 스케줄러 옵션 (선택)
            if [ "${{ secrets.COLLECT_INTERVAL_SEC }}" != "" ]; then echo COLLECT_INTERVAL_SEC=${{ secrets.COLLECT_INTERVAL_SEC }} >> .env; fi
            if [ "${{ secrets.COLLECT_REGION }}" != "" ]; then echo COLLECT_REGION=${{ secrets.COLLECT_REGION }} >> .env; fi
            if [ "${{ secrets.COLLECT_PLAYERS }}" != "" ]; then echo COLLECT_PLAYERS=${{ secrets.COLLECT_PLAYERS }} >> .env; fi
            if [ "${{ secrets.COLLECT_PER_PLAYER }}" != "" ]; then echo COLLECT_PER_PLAYER=${{ secrets.COLLECT_PER_PLAYER }} >> .env; fi
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker compose -f docker-compose.prod.yml pull
            # .env는 현재 디렉토리에서 compose가 자동 인식합니다
            docker compose -f docker-compose.prod.yml up -d
            docker system prune -f || true
