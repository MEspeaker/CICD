# 1) HTTP → HTTPS 리다이렉트 + ACME
server {
    listen 80;
    server_name $DOMAIN;

    # ACME challenge
    location ^~ /.well-known/acme-challenge/ {
        root /var/www/certbot;
        default_type "text/plain";
        try_files $uri =404;
        allow all;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# 2) HTTPS 서비스
server {
    listen 443 ssl;
    server_name $DOMAIN;

    ssl_certificate     /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
    include             /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam         /etc/letsencrypt/ssl-dhparams.pem;

    server_tokens off;

    # ── WAF(ModSecurity) ────────────────────────────────────────────────
    # 볼륨 구조: /etc/nginx/modsec/main.conf 가 modsecurity.conf/CRS를 include
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsec/main.conf;

    # ── 보안 헤더 ───────────────────────────────────────────────────────
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), camera=(), microphone=()" always;

    # ⚠ 현재 index.html이 인라인 <style>과 인라인 <script>를 사용하므로 'unsafe-inline' 필요
    #   fetch('/api/...') 호출을 위해 connect-src 'self' 도 허용
    add_header Content-Security-Policy "\
      default-src 'self'; \
      base-uri 'self'; \
      frame-ancestors 'self'; \
      form-action 'self'; \
      script-src 'self' 'unsafe-inline'; \
      style-src  'self' 'unsafe-inline'; \
      connect-src 'self'; \
      img-src 'self' data:; \
      font-src 'self' data:; \
    " always;

    # HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Spectre 완화(브라우저 측)
    add_header Cross-Origin-Opener-Policy  "same-origin" always;
    add_header Cross-Origin-Resource-Policy "same-origin" always;
    # 필요 시: add_header Cross-Origin-Embedder-Policy "require-corp" always;

    proxy_hide_header X-Powered-By;

    # ── 정적 파일(/static) : Flask로 프록시 ─────────────────────────────
    # WAF는 유지(요청 특성상 오탐이 있으면 룰 튜닝으로 해결)
    location ^~ /static/ {
        add_header Cache-Control "public, max-age=31536000, immutable" always;
        proxy_pass http://web:5000;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # ── 애플리케이션 프록시 ────────────────────────────────────────────
    location / {
        proxy_pass http://web:5000;
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}


