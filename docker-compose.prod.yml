
services:
  web:
    image: ${DOCKERHUB_USERNAME}/myflask:latest
    environment:
      FLASK_ENV: production
      RIOT_API_KEY: ${RIOT_API_KEY}
      COLLECT_INTERVAL_SEC: ${COLLECT_INTERVAL_SEC:-900}
      COLLECT_REGION: kr
      COLLECT_PLAYERS: ${COLLECT_PLAYERS:-15}
      COLLECT_PER_PLAYER: ${COLLECT_PER_PLAYER:-3}
    expose:
      - "5000"
    healthcheck:
      test: ["CMD", "python", "-c", "import socket,sys; s=socket.socket(); s.settimeout(1); s.connect(('127.0.0.1',5000)); s.close(); sys.exit(0)"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  nginx:
    container_name: nginx
    build:
      context: ./nginx              # ← WAF 빌드 컨텍스트
      dockerfile: Dockerfile.waf    # ← 동적 모듈(modsecurity) 포함
    depends_on:
      web:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    environment:
      DOMAIN: ${DOMAIN}
    volumes:
      # Nginx 템플릿(HTTP/HTTPS 전환 시 파일 교체)
      - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template:ro

      # Certbot (발급·갱신)
      - ./certbot/config:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot

      # WAF(설정/룰/로그)
      - ./nginx/modsec:/etc/nginx/modsec:ro         # main.conf, modsecurity.conf, crs/*.conf 등
      - ./nginx/logs:/var/log/nginx                 # Nginx 로그
      - ./nginx/modsec-logs:/var/log/modsecurity    # ModSecurity 감사 로그

    entrypoint:
      - sh
      - -exc
      - |
        # 템플릿 -> 동적 conf 생성
        envsubst '$DOMAIN' < /etc/nginx/templates/default.conf.template > /etc/nginx/conf.d/default.conf
        # 문법 확인
        nginx -t
        # 실행 (nginx.conf 최상단에서 modsecurity 모듈 load)
        exec nginx -g 'daemon off;'
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    command:
      - certonly
      - --webroot
      - --webroot-path=/var/www/certbot
      - --non-interactive
      - --agree-tos
      - --email
      - "${LETSENCRYPT_EMAIL}"
      - -d
      - "${DOMAIN}"
    volumes:
      - ./certbot/config:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: "no"

  certbot-renew:
    image: certbot/certbot
    volumes:
      - ./certbot/config:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: >
      sh -c "while true; do
               certbot renew --quiet --deploy-hook 'docker exec nginx nginx -s reload';
               sleep 12h;
             done"
    restart: unless-stopped

volumes:
  certbot-config:
    driver: local
  certbot-www:
    driver: local
